//生成columns
function getArr(str){
	return str.split(' ').map((item,i)=>{
		return {
	        "title": item,
	        "dataIndex": "field",
	        "key": "field" + i,
	      }
	})
};
JSON.stringify(getArr('工号 姓名 手机号 岗位 在职状态 入职时间 操作'))

//生成require 
'area.js knight_check_log.js partner.js staff.js employee_list.js knight_check.js knight_list.js product_setup.js'.split(' ').map(i=> {return 'require(\'./'+i+'\')'}).join(',')

//生成select Option
function getOption(str) {
  let _r = [];
  str.replace(/value=\"([^%>]+)?\"/g, function(match, name){
    _r.push({val:_r.length,title:name})
  });
  return JSON.stringify(_r);
};


//小于300的24个
function get300Num() {
	let n=24,_r = [], _t = null;
	while(n){
		_t = Math.random()*300;
		_r.push(_t.toFixed(2)*1);
		n--;
	}
	return JSON.stringify(_r);
}


//数组倒序 合成require
[].reverse()
['parnter_wallet',"parnter_bills","courier_bills"].map(item => `require(\'./${item}.js\')`).toString()


//create babel plugin install 
let obdd = {
  "presets": ["es2015", "react", "stage-2", "stage-3"],
  "plugins": [
    "transform-runtime",
    "transform-strict-mode",
    "transform-es2015-modules-commonjs",
    "transform-es2015-spread",
    "transform-es2015-destructuring",
    "transform-es2015-parameters",
    "syntax-async-functions",
    "transform-async-to-generator",
    "syntax-export-extensions",
    "transform-es2015-spread"
  ]
}
let arrpl=[];
for(let onb in obdd){
   let _type = onb === 'presets' ? 'preset' : 'plugin';
   obdd[onb].forEach(item => {
      arrpl.push(`babel-${_type}-${item}`);
   })
}
arrpl.join(' ')



//MDN 抓取Conversion_getter 方法
let _r = [];
$('#Conversion_getter+dl dt code').each(function(){
  _r.push($(this).text().replace('()','').split('.').pop());	
});
let _d = new Date();
_r.forEach((item, index)=>{
  let txt = 'error'
  try {
   txt = _d[item]()
  } 
  catch(e) {
  
  }
  console.log(item, index,'=>  ',txt)
})

// 进阶字符串模板
function strTemplate(tempalte, data, dict) {
    // 正则替换
    let result = tempalte.replace(/\$\{(\S*)\}/g, function(word, field){
        let fields = field.replace(/\s/g, '').split('|')
        if(fields.length === 1) {
            return data[field]
        }
        // 含过滤器 替换第一个值 这样就对上了
        fields[0] = data[fields[0]]
        // 归并取值
        let result = fields.reduce((total, currField) => {
        return total[currField]
        }, dict)
    })
    return result
}



